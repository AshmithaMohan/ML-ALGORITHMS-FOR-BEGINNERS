import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D

# Load the VGG16 model pre-trained on ImageNet and remove the top classification layer
base_model = VGG16(weights='imagenet', include_top=False)

# Add custom layers for skin cancer detection
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the VGG16 layers for fine-tuning only the custom layers
for layer in base_model.layers:
    layer.trainable = False

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Load an image of skin lesion
img = load_img("skin_cancer_image.jpg", target_size=(224, 224))
img_array = img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)

# Normalize image for VGG16 model
img_array /= 255.0

# Predict skin cancer presence (0: benign, 1: malignant)
prediction = model.predict(img_array)
print("Skin Cancer Prediction (0: benign, 1: malignant):", prediction)
